-- USE [STAG_SALES_DB]
-------------------------------------------------------------------------------------------------
-- CREATE TABLES >> FIRST TIME LOAD
-------------------------------------------------------------------------------------------------

DROP TABLE IF EXISTS CUSTOMERS;
SELECT * INTO CUSTOMERS FROM [STAG_SALES_DB].DBO.CUSTOMERS;
-- SELECT * FROM CUSTOMERS;

DROP TABLE IF EXISTS PRODUCTS;
SELECT * INTO PRODUCTS FROM [STAG_SALES_DB].DBO.VW_PRODUCTS;
-- SELECT * FROM PRODUCTS;

DROP TABLE IF EXISTS EMPLOYEES;
SELECT * INTO EMPLOYEES FROM [STAG_SALES_DB].DBO.EMPLOYEES;
-- SELECT * FROM EMPLOYEES;

DROP TABLE IF EXISTS OFFICES;
SELECT * INTO OFFICES FROM [STAG_SALES_DB].DBO.OFFICES;
-- SELECT * FROM OFFICES;

DROP TABLE IF EXISTS ORDERS;
SELECT * INTO ORDERS FROM [STAG_SALES_DB].DBO.VW_ORDERS;
-- SELECT * FROM ORDERS;

DROP TABLE IF EXISTS ORDER_DETAILS;
SELECT * INTO ORDER_DETAILS FROM [STAG_SALES_DB].DBO.VW_ORDER_DETAILS;
-- SELECT * FROM ORDER_DETAILS;

DROP TABLE IF EXISTS PAYMENTS;
SELECT * INTO PAYMENTS FROM [STAG_SALES_DB].DBO.VW_PAYMENTS;
-- SELECT * FROM PAYMENTS;

-- SELECT * FROM DATES;

-------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------
-- CREATE SP's TO POPULATE (MERGE) DATA INTO TABLES
-------------------------------------------------------------------------------------------------

-- HELPER SCRIPT

SELECT 
  CONCAT('T.',COLUMN_NAME,' = S.',COLUMN_NAME,',')
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CUSTOMERS'
ORDER BY ORDINAL_POSITION ASC
;
SELECT 
  CONCAT('DIM.',COLUMN_NAME,' = S.',COLUMN_NAME,',')
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'EMPLOYEES'
ORDER BY ORDINAL_POSITION ASC
;

SELECT 
  CONCAT(COLUMN_NAME,',')
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CUSTOMERS'
ORDER BY ORDINAL_POSITION ASC
;

SELECT 
  CONCAT('S.',COLUMN_NAME,',')
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CUSTOMERS'
ORDER BY ORDINAL_POSITION ASC
;

-------------------------------------------------------------------------------------------------
-- EITHER DATA IS MORE OR LESS, WE CAN USE SUBQUERY INSTEAD OF SOURCE TABLE TO FETCH ONLY LAST DAY DATA..
-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_CUSTOMERS
-- EXEC REFRESH_DIM_CUSTOMERS;

AS

MERGE INTO CUSTOMERS T
USING [STAG_SALES_DB].DBO.CUSTOMERS S
ON T.CUSTOMERNUMBER = S.CUSTOMERNUMBER

WHEN MATCHED THEN UPDATE
SET
-- T.CUSTOMERNUMBER = S.CUSTOMERNUMBER,
T.CUSTOMERNAME = S.CUSTOMERNAME,
T.CONTACTLASTNAME = S.CONTACTLASTNAME,
T.CONTACTFIRSTNAME = S.CONTACTFIRSTNAME,
T.PHONE = S.PHONE,
T.ADDRESSLINE1 = S.ADDRESSLINE1,
T.ADDRESSLINE2 = S.ADDRESSLINE2,
T.CITY = S.CITY,
T.STATE = S.STATE,
T.POSTALCODE = S.POSTALCODE,
T.COUNTRY = S.COUNTRY,
T.SALESREPEMPLOYEENUMBER = S.SALESREPEMPLOYEENUMBER,
T.CREDITLIMIT = S.CREDITLIMIT

WHEN NOT MATCHED BY TARGET THEN 
INSERT 
(
CUSTOMERNUMBER,
CUSTOMERNAME,
CONTACTLASTNAME,
CONTACTFIRSTNAME,
PHONE,
ADDRESSLINE1,
ADDRESSLINE2,
CITY,
STATE,
POSTALCODE,
COUNTRY,
SALESREPEMPLOYEENUMBER,
CREDITLIMIT
)
VALUES
(
S.CUSTOMERNUMBER,
S.CUSTOMERNAME,
S.CONTACTLASTNAME,
S.CONTACTFIRSTNAME,
S.PHONE,
S.ADDRESSLINE1,
S.ADDRESSLINE2,
S.CITY,
S.STATE,
S.POSTALCODE,
S.COUNTRY,
S.SALESREPEMPLOYEENUMBER,
S.CREDITLIMIT
)
;

-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_OFFICES
-- EXEC REFRESH_DIM_OFFICES;

AS

MERGE INTO OFFICES T
USING [STAG_SALES_DB].DBO.OFFICES S
ON T.OFFICECODE = S.OFFICECODE

WHEN MATCHED THEN UPDATE
SET
-- T.ID = S.ID,
-- T.OFFICECODE = S.OFFICECODE,
T.PHONE = S.PHONE,
T.ADDRESSLINE1 = S.ADDRESSLINE1,
T.ADDRESSLINE2 = S.ADDRESSLINE2,
T.CITY = S.CITY,
T.STATE = S.STATE,
T.POSTALCODE = S.POSTALCODE,
T.COUNTRY = S.COUNTRY,
T.TERRITORY = S.TERRITORY

WHEN NOT MATCHED BY TARGET THEN 
INSERT 
(
OFFICECODE,
PHONE,
ADDRESSLINE1,
ADDRESSLINE2,
CITY,
STATE,
POSTALCODE,
COUNTRY,
TERRITORY
)
VALUES
(
S.OFFICECODE,
S.PHONE,
S.ADDRESSLINE1,
S.ADDRESSLINE2,
S.CITY,
S.STATE,
S.POSTALCODE,
S.COUNTRY,
S.TERRITORY
)
;

-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_ORDERS
-- EXEC REFRESH_DIM_ORDERS;

AS

MERGE INTO ORDERS T
USING [STAG_SALES_DB].DBO.VW_ORDERS S
ON T.ORDERNUMBER = S.ORDERNUMBER

WHEN MATCHED THEN UPDATE
SET
-- T.ORDERNUMBER = S.ORDERNUMBER,
T.CUSTOMERNUMBER = S.CUSTOMERNUMBER,
T.EMPLOYEENUMBER = S.EMPLOYEENUMBER,
T.OFFICECODE = S.OFFICECODE,
T.ORDERDATE = S.ORDERDATE,
T.REQUIREDDATE = S.REQUIREDDATE,
T.SHIPPEDDATE = S.SHIPPEDDATE,
T.STATUS = S.STATUS,
T.COMMENTS = S.COMMENTS

WHEN NOT MATCHED BY TARGET THEN 
INSERT 
(
ORDERNUMBER,
CUSTOMERNUMBER,
EMPLOYEENUMBER,
OFFICECODE,
ORDERDATE,
REQUIREDDATE,
SHIPPEDDATE,
STATUS,
COMMENTS
)
VALUES
(
S.ORDERNUMBER,
S.CUSTOMERNUMBER,
S.EMPLOYEENUMBER,
S.OFFICECODE,
S.ORDERDATE,
S.REQUIREDDATE,
S.SHIPPEDDATE,
S.STATUS,
S.COMMENTS
)
;

-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_ORDER_DETAILS
-- EXEC REFRESH_DIM_ORDER_DETAILS;

AS

MERGE INTO ORDER_DETAILS T
USING [STAG_SALES_DB].DBO.VW_ORDER_DETAILS S
ON T.ORDERNUMBER = S.ORDERNUMBER
AND T.ORDERLINENUMBER = S.ORDERLINENUMBER

WHEN MATCHED THEN UPDATE
SET
-- T.ID = S.ID,
-- T.ORDERNUMBER = S.ORDERNUMBER,
-- T.ORDERLINENUMBER = S.ORDERLINENUMBER,
T.CUSTOMERNUMBER = S.CUSTOMERNUMBER,
T.EMPLOYEENUMBER = S.EMPLOYEENUMBER,
T.OFFICECODE = S.OFFICECODE,
T.PRODUCTCODE = S.PRODUCTCODE,
T.QUANTITYORDERED = S.QUANTITYORDERED,
T.PRICEEACH = S.PRICEEACH,
T.PRICE = S.PRICE

WHEN NOT MATCHED BY TARGET THEN 
INSERT 
(
-- ID,
ORDERNUMBER,
ORDERLINENUMBER,
CUSTOMERNUMBER,
EMPLOYEENUMBER,
OFFICECODE,
PRODUCTCODE,
QUANTITYORDERED,
PRICEEACH,
PRICE
)
VALUES
(
-- S.ID,
S.ORDERNUMBER,
S.ORDERLINENUMBER,
S.CUSTOMERNUMBER,
S.EMPLOYEENUMBER,
S.OFFICECODE,
S.PRODUCTCODE,
S.QUANTITYORDERED,
S.PRICEEACH,
S.PRICE
)
;

-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_PAYMENTS
-- EXEC REFRESH_DIM_PAYMENTS;

AS

MERGE INTO PAYMENTS T
USING [STAG_SALES_DB].DBO.VW_PAYMENTS S
ON T.PAYMENTID = S.PAYMENTID

WHEN MATCHED THEN UPDATE
SET
-- T.PAYMENTID = S.PAYMENTID,
T.CUSTOMERNUMBER = S.CUSTOMERNUMBER,
T.EMPLOYEENUMBER = S.EMPLOYEENUMBER,
T.OFFICECODE = S.OFFICECODE,
T.CHECKNUMBER = S.CHECKNUMBER,
T.PAYMENTDATE = S.PAYMENTDATE,
T.AMOUNT = S.AMOUNT

WHEN NOT MATCHED BY TARGET THEN 
INSERT 
(
PAYMENTID,
CUSTOMERNUMBER,
EMPLOYEENUMBER,
OFFICECODE,
CHECKNUMBER,
PAYMENTDATE,
AMOUNT
)
VALUES
(
S.PAYMENTID,
S.CUSTOMERNUMBER,
S.EMPLOYEENUMBER,
S.OFFICECODE,
S.CHECKNUMBER,
S.PAYMENTDATE,
S.AMOUNT
)
;

-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_PRODUCTS
-- EXEC REFRESH_DIM_PRODUCTS;

AS

MERGE INTO PRODUCTS T
USING [STAG_SALES_DB].DBO.VW_PRODUCTS S
ON T.PRODUCTCODE = S.PRODUCTCODE

WHEN MATCHED THEN UPDATE
SET
-- T.ID = S.ID,
-- T.PRODUCTCODE = S.PRODUCTCODE,
T.PRODUCTNAME = S.PRODUCTNAME,
T.PRODUCTCATEGORY = S.PRODUCTCATEGORY,
T.PRODUCTSCALE = S.PRODUCTSCALE,
T.PRODUCTVENDOR = S.PRODUCTVENDOR,
T.PRODUCTDESCRIPTION = S.PRODUCTDESCRIPTION,
T.QUANTITYINSTOCK = S.QUANTITYINSTOCK,
T.BUYPRICE = S.BUYPRICE,
T.MSRP = S.MSRP

WHEN NOT MATCHED BY TARGET THEN 
INSERT 
(
-- ID,
PRODUCTCODE,
PRODUCTNAME,
PRODUCTCATEGORY,
PRODUCTSCALE,
PRODUCTVENDOR,
PRODUCTDESCRIPTION,
QUANTITYINSTOCK,
BUYPRICE,
MSRP
)
VALUES
(
-- S.ID,
S.PRODUCTCODE,
S.PRODUCTNAME,
S.PRODUCTCATEGORY,
S.PRODUCTSCALE,
S.PRODUCTVENDOR,
S.PRODUCTDESCRIPTION,
S.QUANTITYINSTOCK,
S.BUYPRICE,
S.MSRP
)
;

-------------------------------------------------------------------------------------------------

CREATE PROCEDURE REFRESH_DIM_EMPLOYEES
-- EXEC REFRESH_DIM_EMPLOYEES;

AS

INSERT INTO EMPLOYEES
(
EMPLOYEENUMBER,
LASTNAME,
FIRSTNAME,
EXTENSION,
EMAIL,
OFFICECODE,
REPORTSTO,
JOBTITLE
)
SELECT 
S.*
FROM [STAG_SALES_DB].DBO.EMPLOYEES S
LEFT JOIN EMPLOYEES DIM
ON S.EMPLOYEENUMBER = DIM.EMPLOYEENUMBER
WHERE DIM.EMPLOYEENUMBER IS NULL
;

UPDATE DIM
SET 
-- DIM.EMPLOYEENUMBER = S.EMPLOYEENUMBER,
DIM.LASTNAME = S.LASTNAME,
DIM.FIRSTNAME = S.FIRSTNAME,
DIM.EXTENSION = S.EXTENSION,
DIM.EMAIL = S.EMAIL,
DIM.OFFICECODE = S.OFFICECODE,
DIM.REPORTSTO = S.REPORTSTO,
DIM.JOBTITLE = S.JOBTITLE
FROM [STAG_SALES_DB].DBO.EMPLOYEES S
JOIN EMPLOYEES DIM
ON S.EMPLOYEENUMBER = DIM.EMPLOYEENUMBER
;

-------------------------------------------------------------------------------------------------

ALTER PROCEDURE REFRESH_DIM_DATES
-- EXEC REFRESH_DIM_DATES;

AS

DROP TABLE IF EXISTS #DATESS;
DROP TABLE IF EXISTS DATES;

DECLARE @StartDate  date = '20030101';

DECLARE @CutoffDate date = '20051231' -- DATEADD(DAY, -1, DATEADD(YEAR, 30, @StartDate));

;WITH seq(n) AS 
(
  SELECT 0 UNION ALL SELECT n + 1 FROM seq
  WHERE n < DATEDIFF(DAY, @StartDate, @CutoffDate)
),
d(d) AS 
(
  SELECT DATEADD(DAY, n, @StartDate) FROM seq
),
src AS
(
  SELECT
    TheDate         = CONVERT(date, d),
    TheDay          = DATEPART(DAY,       d),
    TheDayName      = DATENAME(WEEKDAY,   d),
    TheWeek         = DATEPART(WEEK,      d),
    TheISOWeek      = DATEPART(ISO_WEEK,  d),
    TheDayOfWeek    = DATEPART(WEEKDAY,   d),
    TheMonth        = DATEPART(MONTH,     d),
    TheMonthName    = DATENAME(MONTH,     d),
    TheQuarter      = DATEPART(Quarter,   d),
    TheYear         = DATEPART(YEAR,      d),
    TheFirstOfMonth = DATEFROMPARTS(YEAR(d), MONTH(d), 1),
    TheLastOfYear   = DATEFROMPARTS(YEAR(d), 12, 31),
    TheDayOfYear    = DATEPART(DAYOFYEAR, d)
  FROM d
)
SELECT * INTO #DATESS FROM src
ORDER BY TheDate
OPTION (MAXRECURSION 0)
;

SELECT * INTO DATES FROM #DATESS
;

-- SELECT * FROM DATES;

-------------------------------------------------------------------------------------------------
